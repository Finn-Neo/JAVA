<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="mapper.MonsterMapper">
    <!--查询所有 age > 10 的妖怪，如果输入的 age <=0 ，输出所有妖怪-->
    <select id="getMonsterByAge" parameterType="Integer" resultType="Monster">
        select * from `monster`
                 where true
        <if test="age >= 0"> # 使用@Param注解
            and age > #{age};
        </if>
    </select>
    
    
    <!--id > 10 && name='牛魔王'
    如果 id =null 不带该条件
    如果 name=null 不带该条件
    多余的 and 会去掉-->
    <select id="getMonsterByIdAndName" parameterType="Integer" resultType="Monster">
        select * from `monster`
        <where>
            <if test="id >=0">
                and `id` > #{id}
            </if>
            <if test="name != null and name != ''">  # TODO 空的条件
                and `name` = #{name}
            </if>
        </where>
    </select>
    
    <!--name != null 按照 name 查询
        id>0 按照 id 查询
        如果都不满足，按照默认方法查找-->
    <select id="getMonsterByIdOrName_choose" parameterType="Map" resultType="Monster">
        select * from `monster`
        <choose>
            <when test=" name != null and name !='' ">
                where `name` = #{name}
            </when>
            <when test="id > 0">
                where `id` > #{id}
            </when>
            <otherwise>
                where `salary` > 100
            </otherwise>
        </choose>
    </select>
    
    
    <!--入参map中会如何传入 id值，k-v ids - [集合，如：List [10, 12, 14]]
    map 入参中应该有 ids-[12, 14, 16]
    
    判断ids是否为空（null ''）
    不为空，使用foreach标签进行遍历
    collection="ids" 对应入参map的key - ids
    item="id" 在遍历ids集合时，取出的值
    TODO 如果写成index="id" ,无论ids是什么，都会根据ids的元素个数，从0开始索引
     对于(10, 12, 14)，最终的结果是(0, 1, 2)
     ==>  Preparing: select * from `monster` WHERE id IN ( ? , ? )
     ==> Parameters: 0(Integer), 1(Integer), 2(Integer)
    open 对应于 (10, 12, 14) 的 "("
    separator 对应于 (10, 12, 14) 的 ","
    close 对应于 (10, 12, 14) 的 ")"
    #{id} 对应于 item 的 id
    -->
    <select id="getMonsterById_forEach" parameterType="map" resultType="Monster">
        select * from `monster`
        <if test=" ids != null and !ids.isEmpty() ">  # 注意这里的判空条件
            <where>
                id IN
                 <foreach collection="ids" item="id" open="(" separator="," close=")">
                     #{id}
                 </foreach>
            </where>
        </if>
    </select>
    
    <!--使用很少-->
    <!--按照 Name & Age 查询，如果sql语句开头有and | or | test 替换为where-->
    <!-- select * from `monster` where `name` = ? or `age` > ? -->
    <select id="getMonsterByNameAndAge_Trim" parameterType="map" resultType="Monster">
        select * from `monster`
        <trim prefix="where" prefixOverrides="and|or|test">
            <if test="name != null and name != '' ">
                test `name` = #{name}
            </if>
            <if test="age != null and age != '' ">
                or `age` > #{age}
            </if>
        </trim>
    </select>
    
    <!--TODO 重要
    对指定的id进行修改，如果没有设置新的属性，保持原来的值-->
    <update id="updateMonster_set" parameterType="map">
        update `monster`
        <set>
            <if test="age != null and age != ''">
                `age` = #{age},
            </if>
            <if test="email != null and email != ''">
                `email` = #{email},
            </if>
            <if test="name != null and name != ''">
                `name` = #{name},
            </if>
            <if test="birthday != null and birthday != ''">
                `birthday` = #{birthday},
            </if>
            <if test="salary != null and salary != ''">
                `salary` = #{salary},
            </if>
            <if test="gender != null and gender != ''">
                `gender` = #{gender},
            </if>
        </set>
        where id = #{id}
    </update>
    
</mapper>
