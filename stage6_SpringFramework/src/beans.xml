<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    
    <!--配置memberDAOImplement对象
    这句放在 配置MemberServiceImplement对象 的语句下面也行-->
    <bean class="main.spring.dao.MemberDAOImplement" id="memberDAOImplement"/>
    
    <!--配置MemberServiceImplement对象   使用ref  -->
    <!--1.ref="memberDAOImplement"表示：
                MemberServiceImplement对象属性memberDAOImplement引用的对象是id=memberService的对象
        2.这里就是Spring的依赖注入
        3.在Spring容器中，是作为一个整体执行的，即如果引用到了一个bean对象，对配置的顺序没有要求
        4.建议按照顺序写，增加代码可读性
    -->
    <!--<bean class="main.spring.service.MemberService" id="memberService">-->
    <!--    <property name="memberDAOImplement" ref="memberDAOImplement"/>-->
    <!--</bean>-->
    <!--配置MemberServiceImplement对象   使用内部Bean  -->
    <bean class="main.spring.service.MemberService" id="memberService2">
        <!--配置内部bean-->
        <property name="memberDAOImplement">
            <bean class="main.spring.dao.MemberDAOImplement"/>
        </property>
    </bean>
    
    <!--=================================================================================================-->
    <!--以下配置方法不要记忆，只要见到认识就行-->
    <!--通过p命名空间配置-->
    <bean class="main.spring.bean.Monster" id="monster06"
          p:monsterId="6"
          p:name="后羿"
          p:skill="周日熄火了"
    />
    
    <!--配置Monster，指定构造器初始化bean对象
    <constructor-arg>标签 指定使用构造器的参数
    index表示使用构造器的第index个参数，从0开始
    还可以通过name / type 指定参数
    -->
    <bean class="main.spring.bean.Monster" id="monster03">
        <constructor-arg value="3" index="0"/>
        <constructor-arg value="芈月" index="1"/>
        <constructor-arg value="镜花水月" index="2"/>
    </bean>
    <bean class="main.spring.bean.Monster" id="monster04">
        <constructor-arg value="4" name="monsterId"/>
        <constructor-arg value="镜" name="name"/>
        <constructor-arg value="老花镜" name="skill"/>
    </bean>
    <bean class="main.spring.bean.Monster" id="monster05">
        <constructor-arg value="5" type="java.lang.Integer"/>
        <constructor-arg value="赔钱虎" type="java.lang.String"/>
        <constructor-arg value="矮脚虎" type="java.lang.String"/>
    </bean>
    
    <!--通过类型获取
    前提是只有一个该类型的bean
    如果下面的Monster bean不注释，使用Monster bean = ioc.getBean(Monster.class);
    会抛出异常NoUniqueBeanDefinitionException-->
    <!--<bean class="main.spring.bean.Monster">-->
    <!--    <property name="monsterId" value="2"/>-->
    <!--    <property name="name" value="猴子"/>-->
    <!--    <property name="skill" value="火眼金睛"/>-->
    <!--</bean>-->
    <!--
        配置Monster对象
        在beans.xml文件中，可以配置多个bean(java对象)
        class属性是用于指定类的全路径->反射
        id属性表示该java对象在该容器中的id（用于获取该对象） 唯一
        <property name="id" value="1"/>用于给该对象的属性赋值
    -->
    <bean class="main.spring.bean.Monster" id="monster01">
        <!--通过配置文件给bean设置属性时，
        底层通过setter()方法完成，setName()
        如果Entity中没有这个方法，会报错-->
        <property name="monsterId" value="1"/>
        <property name="name" value="牛魔"/>
        <property name="skill" value="撼天动地"/>
    </bean>
    <bean class="main.spring.bean.Monster" id="monster02">
        <property name="monsterId" value="2"/>
        <property name="name" value="猴子"/>
        <property name="skill" value="火眼金睛"/>
    </bean>
</beans>
