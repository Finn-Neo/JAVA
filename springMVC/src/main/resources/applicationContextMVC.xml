<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:component-scan base-package="web"/>
    
    <!--配置 默认 视图解析器
    不会解析 自定义视图 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--配置前缀和后缀属性-->
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
        
        <property name="order" value="10011111"/>
    </bean>
    
    <!--配置 自定义视图解析器  BeanNameViewResolver
    可以解析自定义视图
    order 表示视图解析器的执行顺序 值越小，优先级越高 默认值是 Integer.MAX_VALUE -->
    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <property name="order" value="99"/>
    </bean>
    
    
    <bean class="org.springframework.context.support.ResourceBundleMessageSource" id="messageSource">
        <property name="basename" value="main.resources.i18n"/>
    </bean>
    
    <!--文件上传需要-->
    <!--TODO 底层是按照id查找的，这里的id要改成 CommonsMultipartResolver 实现的接口的名字 multipartResolver-->
    <!--
    public class CommonsMultipartResolver extends CommonsFileUploadSupport
		implements MultipartResolver, ServletContextAware {
    -->
    <bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver"/>
    
    <!--配置自定义拦截器 Spring配置文件-->
    <mvc:interceptors>
        <!--1.直接使用ref引用对应的拦截器
        会拦截所有的目标方法-->
        <!--<ref bean="myInterceptor01"/>-->
        
        <!--2.指定要拦截的路径
        指定对哪个拦截器配置-->
        <!--<mvc:interceptor>-->
        <!--    <mvc:mapping path="/hi"/>-->
        <!--    <ref bean="myInterceptor01"/>-->
        <!--</mvc:interceptor>-->
        
        <!--3.指定一个路径范围 进行拦截 所有以h开头的路径都会被拦截-->
        <mvc:interceptor>
            <mvc:mapping path="/h*"/>
            <!--不拦截 /hello这个路径-->
            <mvc:exclude-mapping path="/hello"/>
            <ref bean="myInterceptor01"/>
        </mvc:interceptor>
        
        <!--第二个拦截器
        多个拦截器按照配置的先后顺序依次执行-->
        <mvc:interceptor>
            <mvc:mapping path="/h*"/>
            <ref bean="myInterceptor02"/>
        </mvc:interceptor>
    </mvc:interceptors>
    
    <!--配置统一处理异常-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!--寻找 /WEB-INF/pages/arrEx.jsp 文件-->
                <prop key="java.lang.ArrayIndexOutOfBoundsException">arrEx</prop>
                <prop key="java.lang.Exception">allEx</prop>
            </props>
        </property>
    </bean>
    
    <!--加入两个常规配置-->
    <!--支持 SpringMVC 的高级功能：JSR303校验，映射动态请求
    JSR-303/JSR-380 验证：支持使用 @Valid 或 @Validated 等注释验证 Bean
    基于注解的控制器：允许使用 @Controller 、 @RequestMapping 和其他 Spring MVC 注解
    转换和格式化：支持请求参数的类型转换和格式化，使用 和 @NumberFormat 等 @InitBinder 注释
    异步请求处理：支持异步请求处理 using @Async 和其他相关注释
    -->
    <mvc:annotation-driven></mvc:annotation-driven>
    <!--将 SpringMVC 不能处理的请求交给 TomCat，比如css,js
    dispatcherServlet会拦截所有请求，包括静态资源，而静态资源应该由容器（TomCat）处理-->
    <mvc:default-servlet-handler></mvc:default-servlet-handler>
</beans>
